{"version":3,"sources":["components/solanaLogo.png","components/solanaLogoInvert.png","components/Coinflip.js","components/CreateCoinflip.js","components/Phantom/SendTransaction.tsx","components/CoinflipMenu.js","components/Home.js","components/Phantom/ConnectToPhantom.tsx","App.js","index.js"],"names":["Coinflip","props","state","title","price","visible","onCancel","footer","onClick","class","id","result","src","SolanaLogoInvert","className","SolanaLogo","date","Date","now","intervalDelay","precision","onComplete","coinflipFinish","renderer","seconds","wallet1","wallet2","onOk","onJoin","okText","cancelText","percent","transactionPercentage","status","transactionError","size","coin","CreateCoinflip","useState","setCoin","setPrice","name","setName","onCreateFlip","wallet","Group","value","onChange","e","target","Button","style","height","textAlign","transform","marginTop","width","border","borderRadius","defaultValue","min","step","stringMode","maxLength","NETWORK","clusterApiUrl","CONNECTION","Connection","EXTERNAL_ADDRESS","PublicKey","provider","window","solana","isPhantom","getProvider","createTransaction","instructions","a","publicKey","transaction","Transaction","add","feePayer","console","log","anyTransaction","getRecentBlockhash","recentBlockhash","blockhash","createTransferTransaction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","sendTransaction","item","updateData","setTransactionPercent","setTransactionError","method","signAndSendTransaction","signature","confirmTransaction","toBase58","user2","warn","JSON","stringify","sendTransferInstruction","CoinflipMenu","loading","setLoading","data","setData","createVisibile","setCreateVisibile","needsUpdate","setNeedsUpdate","transactionPercent","loadNewData","fetch","then","res","json","body","sort","b","parseInt","i","length","setTimeout","catch","React","useEffect","handle","setInterval","clearInterval","axios","post","coinflipData","response","error","createCoinflip","useRef","LoadingOutlined","fontSize","cursor","position","top","right","ReloadOutlined","marginBottom","overflow","padding","dataLength","next","loader","avatar","paragraph","rows","active","endMessage","plain","scrollableTarget","dataSource","renderItem","Item","Meta","user1","href","description","marginRight","endCoinflip","Card","Account","gutter","span","Logo","alt","disabled","PhantomSVG","version","xmlns","viewBox","preserveAspectRatio","fill","stroke","d","ConnectToPhantom","phantom","setPhantom","connected","setConnected","on","icon","Icon","component","disconnect","danger","connect","Header","Layout","Content","Footer","Sider","Menu","SubMenu","App","collapsed","setCollapsed","currentPage","setCurrentPage","changeCurrentPage","page","localStorage","setItem","parsedData","getItem","display","bottom","float","theme","mode","defaultSelectedKeys","minHeight","collapsible","onCollapse","HomeOutlined","DollarOutlined","margin","Home","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qZAAe,MAA0B,uCCA1B,MAA0B,6C,2CC+F1BA,EAxFE,SAACC,GAEd,OACI,mCACqB,YAAhBA,EAAMC,MAAsB,mCAC7B,cAAC,IAAD,CACIC,MAAO,YAAcF,EAAMG,MAAQ,OACnCC,QAASJ,EAAMI,QACfC,SAAUL,EAAMK,SAChBC,OAAQ,CACJ,cAAC,IAAD,CAAmBC,QAASP,EAAMK,SAAlC,iBAAY,SALpB,SAUA,sBAAKG,MAAM,eAAX,UACI,sBAAKC,GAAG,OAAOD,MAAOR,EAAMU,OAA5B,UACI,qBAAKF,MAAM,SAAX,SACI,qBAAKG,IAAKC,MAEd,qBAAKC,UAAU,SAAf,SACI,qBAAKF,IAAKG,SAGlB,oBAAGN,MAAM,iBAAiBC,GAAG,YAA7B,cAA0C,cAAC,IAAD,CAC1CM,KAAMC,KAAKC,MAAQ,IACnBC,cAAe,EACfC,UAAW,EACXC,WAAYpB,EAAMqB,eAClBC,SAAU,SAAAtB,GAAK,OAAI,8BAAMA,EAAMuB,aAL/B,OAOA,8BAAIvB,EAAMwB,QAAV,IAAmB,uBAAnB,OAA4B,uBAA5B,IAAmCxB,EAAMyB,kBAGvB,SAAhBzB,EAAMC,MAAmB,mCAC/B,eAAC,IAAD,CACIC,MAAO,YAAcF,EAAMG,MAC3BC,QAASJ,EAAMI,QACfC,SAAUL,EAAMK,SAChBqB,KAAM1B,EAAM2B,OACZC,OAAO,OACPC,WAAW,SANf,UAQI,sBAAKrB,MAAM,eAAX,UACgB,sBAAKC,GAAG,OAAOI,UAAWb,EAAMU,OAAhC,UACZ,qBAAKF,MAAM,SAAX,SACI,qBAAKG,IAAKC,MAEd,qBAAKC,UAAU,SAAf,SACI,qBAAKF,IAAKG,SAGd,mBAAGN,MAAM,iBAAT,2BACA,+CAAkBR,EAAMwB,QAAxB,IAAiC,uBAAjC,QAA4CxB,EAAMG,MAAlD,aAEJ,cAAC,IAAD,CAAU2B,QAAS9B,EAAM+B,sBAAuBC,OAAQhC,EAAMiC,iBAAmB,YAAc,OAAQC,KAAK,eAE1G,mCACN,cAAC,IAAD,CACIhC,MAAO,YAAcF,EAAMG,MAC3BC,QAASJ,EAAMI,QACfC,SAAUL,EAAMK,SAChBC,OAAQ,CACJ,cAAC,IAAD,CAAmBC,QAASP,EAAMK,SAAlC,iBAAY,SALpB,SAUI,sBAAKG,MAAM,eAAX,UACI,sBAAKC,GAAG,OAAOI,UAAWb,EAAMU,OAAS,IAAzC,UACA,qBAAKF,MAAM,SAAX,SACI,qBAAKG,IAAKC,MAEd,qBAAKC,UAAU,SAAf,SACI,qBAAKF,IAAKG,SAGd,mBAAGN,MAAM,iBAAT,uBACD,yCAAW,uBAAX,IAAoC,UAAjBR,EAAMU,QAAqC,MAAfV,EAAMmC,MAAgD,UAAjBnC,EAAMU,QAAqC,MAAfV,EAAMmC,KAAlDnC,EAAMwB,QAA2ExB,EAAMyB,qB,2BChB/JW,EA9DQ,SAACpC,GACpB,MAAwBqC,mBAAS,KAAjC,mBAAOF,EAAP,KAAaG,EAAb,KACA,EAA0BD,mBAAS,GAAnC,mBAAOlC,EAAP,KAAcoC,EAAd,KACA,EAAwBF,mBAAS,gBAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAcA,OACI,mCACI,cAAC,IAAD,CACIvC,MAAO,oBACPE,QAASJ,EAAMI,QACfC,SAAUL,EAAMK,SAChBqB,KAAM,WAAO1B,EAAM0C,aACf,CACIvC,MAAOA,EACPqC,KAAMA,EACNG,OAAQ,KACRR,KAAMA,KAGdN,WAAY,SACZD,OAAQ,kBAbZ,SAeA,sBAAKpB,MAAM,eAAX,UACQ,+CACA,eAAC,IAAMoC,MAAP,CAAaC,MAAOV,EAAMW,SA/BjB,SAACC,GACtBT,EAAQS,EAAEC,OAAOH,QA8BL,UACI,cAAC,IAAMI,OAAP,CAAcC,MAAO,CAACC,OAAQ,MAAOC,UAAW,SAAUC,UAAW,kBAAmBC,UAAW,QAAST,MAAM,IAAlH,SAAsH,qBAAKK,MAAO,CAACK,MAAO,OAAQC,OAAQ,oBAAqBC,aAAc,OAAQH,UAAW,MAAOD,UAAW,mBAAoB1C,IAAKG,MAC3P,cAAC,IAAMmC,OAAP,CAAcC,MAAO,CAACC,OAAQ,MAAOC,UAAW,SAAUC,UAAW,kBAAmBC,UAAW,QAAST,MAAM,IAAlH,SAAsH,qBAAKK,MAAO,CAACK,MAAO,OAAQC,OAAQ,oBAAqBC,aAAc,OAAQH,UAAW,MAAOD,UAAW,mBAAoB1C,IAAKC,SAE/P,mBAAGsC,MAAO,CAACI,UAAW,SAAtB,8BACA,cAAC,IAAD,CACIR,SAjCM,SAACC,GACvBR,EAASQ,IAiCOW,aAAcvD,EACdwD,IAAI,OACJC,KAAK,OACLC,YAAU,IAEd,mBAAGX,MAAO,CAACI,UAAW,QAAtB,4BACA,cAAC,IAAD,CACIQ,UAAW,GACXZ,MAAO,CAACK,MAAO,SACfT,SAvCK,SAACC,GACtBN,EAAQM,EAAEC,OAAOH,QAuCDA,MAAOL,IAEX,cAAC,IAAD,CAAUV,QAAS9B,EAAM+B,sBAAuBC,OAAQhC,EAAMiC,iBAAmB,YAAc,OAAQC,KAAK,kB,QCP1H6B,EAAUC,YAAc,UACxBC,EAAa,IAAIC,IAAWH,GAC5BI,EAAmB,IAAIC,IAC3B,gDAGIC,EAhBc,WAClB,GAAI,WAAYC,OAAQ,CACtB,IACMD,EADiBC,OACIC,OAC3B,GAAIF,EAASG,UACX,OAAOH,GAWII,GAGXC,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDACnBP,EAASQ,UADU,wDAIpBC,GAAc,MAAIC,KAAcC,IAAlB,oBAAyBL,KAC/BM,SAAWZ,EAASQ,UAChCK,QAAQC,IAAI,4BACNC,EAAsBN,EAPJ,SAShBb,EAAWoB,qBATK,cAQxBD,EAAeE,gBARS,OAUtBC,UAVsB,kBAWjBT,GAXiB,4CAAH,sDAajBU,EAAyB,uCAAG,WAAOrF,GAAP,SAAAyE,EAAA,+EAChCF,EAAkB,CAChBe,IAAcC,SAAS,CACrBC,WAAYtB,EAASQ,UACrBe,SAAUzB,EACV0B,SAAmB,IAAR1F,OALiB,2CAAH,sDAQzB2F,EAAe,uCAAG,WAAOhB,EAA0BiB,EAAMC,EAAYC,EAAuBC,EAAqBC,GAA/F,qBAAAvB,EAAA,0DAClBE,EADkB,iCAGhBmB,EAAsB,IAHN,SAIU5B,EAAS+B,uBAAuBtB,GAJ1C,uBAIVuB,EAJU,EAIVA,UACNnB,QAAQC,IACN,yBAA2BkB,EAAY,2BAEzCJ,EAAsB,IARN,UASVhC,EAAWqC,mBAAmBD,GATpB,QAUF,QAAXF,EACDJ,EAAKpD,OAAL,UAAc0B,EAASQ,iBAAvB,aAAc,EAAoB0B,WACf,WAAXJ,IACRJ,EAAK9F,MAAQ,UACb8F,EAAKS,MAAM7D,OAAX,UAAoB0B,EAASQ,iBAA7B,aAAoB,EAAoB0B,YAE1CP,EAAWD,GACXb,QAAQC,IAAI,eAAiBkB,EAAY,cACzCJ,EAAsB,KAlBN,kDAoBlBf,QAAQuB,KAAR,MACAvB,QAAQC,IAAI,UAAYuB,KAAKC,UAAL,OACxBT,GAAoB,GAtBF,gCAyBpBA,GAAoB,GAzBA,0DAAH,gEAmCNU,EAPc,uCAAG,WAAOb,EAAMC,EAAYC,EAAuBC,EAAqBC,GAArE,eAAAvB,EAAA,sEACFY,EAA0BO,EAAK5F,OAD7B,OACtB2E,EADsB,OAE5BmB,EAAsB,IACtBH,EAAgBhB,EAAaiB,EAAMC,EAAYC,EAAuBC,EAAqBC,GAH/D,2CAAH,8DCyDdU,MAxJf,WACI,MAA8BxE,oBAAS,GAAvC,mBAAOyE,EAAP,KAAgBC,EAAhB,KACA,EAAwB1E,mBAAS,IAAjC,mBAAO2E,EAAP,KAAaC,EAAb,KACA,EAA4C5E,oBAAS,GAArD,mBAAO6E,EAAP,KAAuBC,EAAvB,KACA,EAAsC9E,oBAAS,GAA/C,mBAAO+E,EAAP,KAAoBC,EAApB,KACA,EAAoDhF,mBAAS,GAA7D,mBAAOiF,EAAP,KAA2BrB,EAA3B,KACA,EAAgD5D,oBAAS,GAAzD,mBAAOJ,EAAP,KAAyBiE,EAAzB,KAEMqB,EAAc,WACZT,IAGJC,GAAW,GACXS,MAAM,6DACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,GAAGA,GAAQZ,EAAM,CACfY,EAAKC,MAAK,SAACjD,EAAGkD,GAAJ,OAAWC,SAASnD,EAAEzE,OAAS4H,SAASD,EAAE3H,OAAU,GAAK,KACnE,IAAK,IAAI6H,EAAI,EAAGA,EAAIJ,EAAKK,OAAQD,IACb,GAAfhB,EAAKiB,QACgB,GAAnBjB,EAAKgB,GAAG5H,QACTwH,EAAKI,GAAG5H,SAAU,EAKpBwH,EAAKI,GAAG5H,SAAU,EAGtB6G,EAAQ,YAAIW,IACZM,YAAW,WAAOnB,GAAW,KAAU,UAEvCmB,YAAW,WAAOnB,GAAW,KAAU,QAG1CoB,OAAM,WACHD,YAAW,WAAOnB,GAAW,KAAU,UAI/CqB,IAAMC,WAAU,WACdd,MACC,IAEHa,IAAMC,WAAU,WACd,GAAGjB,EAAa,CACd,IAAIkB,EAAOC,YAAYnB,EAAcG,EAAc,KAAM,KAEzD,OAAO,WACLiB,cAAcF,QAKpB,IAAMtC,EAAa,SAACD,GAClB0C,IAAMC,KAAK,kEAAmE,CAACC,aAAc5C,IAC5F0B,MAAK,SAAUmB,GACdrB,OAEDY,OAAM,SAAUU,GACf3D,QAAQC,IAAI0D,OAeVC,EAAiB,SAAC/C,GACtB0C,IAAMC,KAAK,2DAA4D,CAAClG,KAAMuD,EAAKvD,KAAMrC,MAAO4F,EAAK5F,MAAOgC,KAAM4D,EAAK5D,KAAMQ,OAAQoD,EAAKpD,SACzI8E,MAAK,SAAUmB,GACdrB,OAEDY,OAAM,SAAUU,GACf3D,QAAQC,IAAI0D,OAMhB,OAFqBE,mBAGrB,sBAAK7F,MAAO,CACVE,UAAW,UADb,UAGA,qBAAKF,MAAO,CAACE,UAAW,SAAxB,SACG0D,EACD,cAACkC,EAAA,EAAD,CAAiB9F,MAAO,CAAC+F,SAAU,OAAQC,OAAQ,UAAWC,SAAU,WAAYC,IAAK,QAASC,MAAO,UAEzG,cAACC,EAAA,EAAD,CAAgBpG,MAAO,CAAC+F,SAAU,OAAQC,OAAQ,UAAWC,SAAU,WAAYC,IAAK,QAASC,MAAO,QAAS9I,QAAS,WAAOgH,SAEnI,cAAC,IAAD,CACArE,MAAO,CACLqG,aAAc,OAAQjG,UAAW,SAEnC/C,QAAS,WAAO4G,GAAkB,GAAOlB,EAAsB,GAAIC,GAAoB,IAJvF,6BAMA,cAAC,EAAD,CAAgBnE,sBAAuBuF,EAAoBrF,iBAAkBA,EAAkB7B,QAAS8G,EAAgB7G,SAAU,WAAO8G,GAAkB,IAASzE,aAAc,SAACqD,GAAUa,EAAwBb,EAAM+C,EAAgB7C,EAAuBC,EAAqB,UACvR,qBACEzF,GAAG,gBACHyC,MAAO,CACLC,OAAQ,IACRC,UAAW,OACXoG,SAAU,OACVC,QAAS,SACTjG,OAAQ,uCAPZ,SAUE,cAAC,IAAD,CACEkG,WAAY1C,EAAKiB,OACjB0B,KAAMpC,EACNqC,OAAQ,cAAC,IAAD,CAAUC,QAAM,EAACC,UAAW,CAAEC,KAAM,GAAKC,QAAM,IACvDC,WAAY,cAAC,IAAD,CAASC,OAAK,EAAd,+BACZC,iBAAiB,gBALnB,SAOE,cAAC,IAAD,CACEC,WAAYpD,EACZqD,WAAY,SAAAtE,GAAI,OACd,eAAC,IAAKuE,KAAN,WACE,cAAC,IAAKA,KAAKC,KAAX,CACEV,OAAQ,cAAC,IAAD,CAAQlJ,IAAwB,KAAnBoF,EAAKyE,MAAMrI,KAAcrB,EAAaF,IAC3DV,MAAO,mBAAGuK,KAAK,IAAR,SAAa1E,EAAKyE,MAAMhI,KAAO,MAAQuD,EAAK5F,MAAQ,QAC3DuK,YAAa3E,EAAKyE,MAAM7H,SAE1B,gCACgB,QAAfoD,EAAKrF,QAAmC,YAAdqF,EAAK9F,MAAsB,KAAuB,SAAf8F,EAAKrF,OAAoB,qBAAKC,IAAKG,EAAYoC,MAAO,CAACK,MAAO,OAAQoH,YAAa,SAAa,qBAAKhK,IAAKC,EAAkBsC,MAAO,CAACK,MAAO,OAAQoH,YAAa,SAC9N,cAAC,IAAD,CACApK,QAAS,WACP0F,EAAsB,GAAIC,GAAoB,GAC9CH,EAAK3F,SAAU,EACf6G,EAAQ,YAAID,IACZK,GAAe,IALjB,SAQgB,QAAdtB,EAAK9F,MAAkB,QAAU,SACnC,cAAC,EAAD,CAAU8B,sBAAuBuF,EAAoBrF,iBAAkBA,EAAkBZ,eAAgB,WAAQ6G,YAAW,WAAOb,GAAe,GA5ExI,SAACtB,GACnB0C,IAAMC,KAAK,2DAA4D,CAACC,aAAc5C,IACrF0B,MAAK,SAAUmB,GACdrB,OAEDY,OAAM,SAAUU,GACf3D,QAAQC,IAAI0D,MAsEmJ+B,CAAY7E,KAAS,MAAS5D,KAAM4D,EAAKyE,MAAMrI,KAAMlC,MAAO8F,EAAK9F,MAAOG,QAAS2F,EAAK3F,QAASD,MAAO4F,EAAK5F,MAAOqB,QAASuE,EAAKyE,MAAM7H,OAAQlB,QAASsE,EAAKS,MAAM7D,OAAQtC,SAAU,WAAO0F,EAAK3F,SAAU,EAAOiH,GAAe,GAAQJ,EAAQ,YAAID,KAAUrF,OAAQ,WAAO0F,GAAe,GAAQT,EAAwBb,EAAMC,EAAYC,EAAuBC,EAAqB,WAAYxF,OAAQqF,EAAKrF,cAjB9hBqF,EAAKtF,e,2CClIhBoK,IAATN,KA6BOO,MA3Bf,WAYE,OACE,sBAAK5H,MAAO,CAACE,UAAW,UAAxB,UACI,cAAC,IAAD,CAAK2H,OAAQ,CAAC,GAAI,IAAlB,SACE,cAAC,IAAD,CAAKC,KAAM,GAAX,SACE,cAAC,IAAD,CAAM9K,MAAO,gCAAK,qBAAKgD,MAAO,CAACK,MAAO,SAAU5C,IAAKsK,EAAMC,IAAI,SAAS,oBAAIhI,MAAO,CAACqG,aAAc,OAA1B,2BAAoD,qEAIhI,cAAC,IAAD,CAAKwB,OAAQ,CAAC,GAAI,IAAK7H,MAAO,CAACI,UAAW,QAA1C,SACE,eAAC,IAAD,CAAK0H,KAAM,GAAX,eAAiB,eAAC,IAAD,eAAO,cAAC,IAAD,CAAW9K,MAAM,eAAe2C,MAAO,SAA9C,IAAyD,cAAC,IAAD,CAAW3C,MAAM,gBAAgB2C,MAAO,eAAjG,IAAkH,cAAC,IAAD,CAAMsI,UAAQ,EAACzH,aAAc,OAAhK,a,SCvBJ0H,EAAa,kBACjB,qBAAKC,QAAQ,MAAMC,MAAM,6BACzB/H,MAAM,OAAOJ,OAAO,OAAOoI,QAAQ,4BACnCC,oBAAoB,gBAFpB,SAIA,oBAAGnI,UAAU,2DACboI,KAAK,UAAUC,OAAO,OADtB,UAEA,sBAAMC,EAAE,62BAYR,sBAAMA,EAAE,oMAGR,sBAAMA,EAAE,yMAqEKC,EA9DU,WACvB,MAA8BvJ,mBAAyB,MAAvD,mBAAOwJ,EAAP,KAAgBC,EAAhB,KAEAzD,qBAAU,WACJ,WAAY/D,QACdwH,EAAWxH,OAAM,UAElB,IAEH,MAAkCjC,oBAAS,GAA3C,mBAAO0J,EAAP,KAAkBC,EAAlB,KAEA3D,qBAAU,WACD,OAAPwD,QAAO,IAAPA,KAASI,GAAG,WAAW,WACrBD,GAAa,MAGR,OAAPH,QAAO,IAAPA,KAASI,GAAG,cAAc,WACxBD,GAAa,QAEd,CAACH,IAUJ,OAAIA,EACEE,EAEA,cAAC,IAAD,CACEG,KAAM,cAACC,EAAA,EAAD,CAAMC,UAAWhB,IACvB7K,QATkB,WACjB,OAAPsL,QAAO,IAAPA,KAASQ,cASHC,QAAQ,EAHV,qCAWF,cAAC,IAAD,CACEJ,KAAM,cAACC,EAAA,EAAD,CAAMC,UAAWhB,IACvB7K,QAxBiB,WACd,OAAPsL,QAAO,IAAPA,KAASU,WAqBP,gCAUF,mBACE9B,KAAK,uBACLzH,OAAO,SAFT,0B,uCC7EIwJ,GAAmCC,IAAnCD,OAAQE,GAA2BD,IAA3BC,QAASC,GAAkBF,IAAlBE,OAAQC,GAAUH,IAAVG,MACbC,KAAZC,QAiDOC,OA/Cf,WACE,MAAkC1K,oBAAS,GAA3C,mBAAO2K,EAAP,KAAkBC,EAAlB,KACA,EAAsC5K,mBAAS,QAA/C,mBAAO6K,EAAP,KAAoBC,EAApB,KAFa,SASEC,EATF,8EASb,WAAiCC,GAAjC,SAAAzI,EAAA,sDACE0I,aAAaC,QAAQ,cAAeF,GACpCF,EAAeE,GAFjB,4CATa,sBAcb,OAVAjF,IAAMC,WAAU,WACd,IAAMmF,EAAaF,aAAaG,QAAQ,gBAAkB,OAC1DN,EAAeK,KACd,IAQD,eAAC,IAAD,WACE,eAAChB,GAAD,CAAQ3L,UAAU,SAAlB,UACE,qBAAKqC,MAAK,aAAGK,MAAO,OAAQmK,QAAS,SAAUvE,SAAU,WAAYwE,OAAQ,OAAnE,UAAmF,UAAWhN,IAAKsK,EAAMC,IAAI,SACvH,cAAC,KAAD,CAAMhI,MAAO,CAACwK,QAAS,SAAUE,MAAO,SAASC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAAtG,SACE,cAAC,EAAD,SAGJ,eAAC,IAAD,CAAQ7K,MAAO,CAAE8K,UAAW,SAA5B,UACE,eAACpB,GAAD,CAAOqB,aAAW,EAACjB,UAAWA,EAAWkB,WAAY,WAAQjB,GAAcD,IAA3E,UACE,qBAAKnM,UAAU,SACf,eAAC,KAAD,CAAMgN,MAAM,OAAOE,oBAAoC,gBAAfb,EAAgC,CAAC,KAAO,CAAC,KAAMY,KAAK,SAA5F,UACE,cAAC,KAAKxD,KAAN,CAAmBpH,MAAO,CAAEI,UAAW,OAAQ4I,KAAM,cAACiC,GAAA,EAAD,IAAkB5N,QAAS,kBAAM6M,EAAkB,SAAxG,iBAAe,KAGf,cAAC,KAAK9C,KAAN,CAAmB4B,KAAM,cAACkC,GAAA,EAAD,IAAoB7N,QAAS,kBAAM6M,EAAkB,iBAA9E,yBAAe,WAKnB,eAAC,IAAD,CAAQvM,UAAU,cAAlB,UACE,cAAC6L,GAAD,CAASxJ,MAAO,CAAEmL,OAAQ,UAA1B,SACE,qBAAKxN,UAAU,yBAAyBqC,MAAO,CAAEuG,QAAS,GAAIuE,UAAW,KAAzE,SACkB,gBAAfd,EAAgC,cAAC,EAAD,IAAmB,cAACoB,EAAD,QAGxD,cAAC3B,GAAD,CAAQzJ,MAAO,CAAEE,UAAW,UAA5B,mCCxDVmL,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.be849795.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/solanaLogo.0af56d5c.png\";","export default __webpack_public_path__ + \"static/media/solanaLogoInvert.797fe01a.png\";","import React from \"react\";\nimport SolanaLogo from './solanaLogo.png'\nimport SolanaLogoInvert from './solanaLogoInvert.png'\nimport Countdown from 'react-countdown';\nimport { Button, Skeleton, Col, Row, Popover, List, Avatar, Divider, Modal, Progress } from 'antd';\n\n\nconst Coinflip = (props) => {\n\n    return (\n        <>\n            {props.state === 'started' ? <>\n            <Modal\n                title={\"Coinflip \" + props.price + \" SOL\"}\n                visible={props.visible}\n                onCancel={props.onCancel}\n                footer={[\n                    <Button key=\"back\" onClick={props.onCancel}>\n                    Back\n                    </Button>,\n                ]}\n            >\n            <div class=\"coinflip-div\">\n                <div id=\"coin\" class={props.result}>\n                    <div class=\"side-a\">\n                        <img src={SolanaLogoInvert}/>\n                    </div>\n                    <div className=\"side-b\">\n                        <img src={SolanaLogo}/>\n                    </div>\n                </div>\n                <p class=\"countdownTimer\" id=\"countdown\"> <Countdown \n                date={Date.now() + 5000} \n                intervalDelay={0}\n                precision={0}\n                onComplete={props.coinflipFinish}\n                renderer={props => <div>{props.seconds}</div>} \n                /> </p>\n                <p>{props.wallet1} <br/> vs <br/> {props.wallet2}</p>\n            </div>\n            </Modal>\n            </> : props.state === 'open' ? <>\n            <Modal\n                title={\"Coinflip \" + props.price}\n                visible={props.visible}\n                onCancel={props.onCancel}\n                onOk={props.onJoin}\n                okText=\"Join\"\n                cancelText=\"Cancel\"\n            >\n                <div class=\"coinflip-div\">\n                                <div id=\"coin\" className={props.result}>\n                    <div class=\"side-a\">\n                        <img src={SolanaLogoInvert}/>\n                    </div>\n                    <div className=\"side-b\">\n                        <img src={SolanaLogo}/>\n                    </div>\n                </div>\n                    <p class=\"countdownTimer\"> Not Started </p>\n                    <p> Join Against {props.wallet1} <br/> for {props.price} SOL</p>\n                </div>\n                <Progress percent={props.transactionPercentage} status={props.transactionError ? 'exception' : 'none'} size=\"small\"  />\n            </Modal>\n            </> : <>\n            <Modal\n                title={\"Coinflip \" + props.price}\n                visible={props.visible}\n                onCancel={props.onCancel}\n                footer={[\n                    <Button key=\"back\" onClick={props.onCancel}>\n                    Back\n                    </Button>,\n                ]}\n            >\n                <div class=\"coinflip-div\">\n                    <div id=\"coin\" className={props.result + '2'}>\n                    <div class=\"side-a\">\n                        <img src={SolanaLogoInvert}/>\n                    </div>\n                    <div className=\"side-b\">\n                        <img src={SolanaLogo}/>\n                    </div>\n                </div>\n                    <p class=\"countdownTimer\">Finished </p>\n                   <p>Winner: <br /> {props.result === 'heads' && props.coin === '1' ? props.wallet1 : props.result === 'tails' && props.coin === '2' ? props.wallet1 : props.wallet2}</p>\n                </div>\n                \n            </Modal>\n            </>\n            }\n        </>\n    );\n}\n\nexport default Coinflip;\n","import React, {useState} from \"react\";\nimport SolanaLogo from './solanaLogo.png'\nimport SolanaLogoInvert from './solanaLogoInvert.png'\nimport Countdown from 'react-countdown';\nimport { Button, Skeleton, Col, Row, Popover, List, Avatar, Divider, Modal, Radio, InputNumber, Input, Progress } from 'antd';\n\n\nconst CreateCoinflip = (props) => {\n    const [coin, setCoin] = useState('1');\n    const [price, setPrice] = useState(1);\n    const [name, setName] = useState('Hello World!');\n\n    const handleCoinChange = (e) => {\n        setCoin(e.target.value);\n    };\n\n    const handlePriceChange = (e) => {\n        setPrice(e);\n    };\n\n    const handleNameChange = (e) => {\n        setName(e.target.value);\n    };\n\n    return (\n        <>\n            <Modal\n                title={\"Coinflip Creation\"}\n                visible={props.visible}\n                onCancel={props.onCancel}\n                onOk={() => {props.onCreateFlip(\n                    {\n                        price: price,\n                        name: name,\n                        wallet: null,\n                        coin: coin,\n                    }\n                )}}\n                cancelText={\"Cancel\"}\n                okText={\"Create Coinflip\"}\n            >\n            <div class=\"coinflip-div\">\n                    <p>Pick your side</p>\n                    <Radio.Group value={coin} onChange={handleCoinChange}>\n                        <Radio.Button style={{height: '0px', textAlign: 'center', transform: 'rotateX(180deg)', marginTop: '50px'}} value=\"1\"><img style={{width: '50px', border: 'solid 2px #DC1FFF', borderRadius: '100%', marginTop: '5px', transform: 'rotateX(180deg)'}} src={SolanaLogo}/></Radio.Button>\n                        <Radio.Button style={{height: '0px', textAlign: 'center', transform: 'rotateX(180deg)', marginTop: '50px'}} value=\"2\"><img style={{width: '50px', border: 'solid 2px #DC1FFF', borderRadius: '100%', marginTop: '5px', transform: 'rotateX(180deg)'}} src={SolanaLogoInvert}/></Radio.Button>\n                    </Radio.Group>\n                    <p style={{marginTop: '-30px'}}>Amount to Wager:</p>\n                    <InputNumber\n                        onChange={handlePriceChange}\n                        defaultValue={price}\n                        min=\"0.05\"\n                        step=\"0.05\"\n                        stringMode\n                    />\n                    <p style={{marginTop: '10px'}}>Coinflip Name:</p>\n                    <Input\n                        maxLength={12}\n                        style={{width: '125px'}}\n                        onChange={handleNameChange}\n                        value={name}\n                    />\n                    <Progress percent={props.transactionPercentage} status={props.transactionError ? 'exception' : 'none'} size=\"small\"  />\n            </div>\n            </Modal>\n        </>\n    );\n}\n\nexport default CreateCoinflip;\n","import { useState, useEffect } from \"react\";\nimport {\n  Connection,\n  PublicKey,\n  Transaction,\n  clusterApiUrl,\n  SystemProgram,\n  TransactionInstruction,\n  SendOptions,\n} from \"@solana/web3.js\";\nimport { Token } from \"@solana/spl-token\";\n\ntype DisplayEncoding = \"utf8\" | \"hex\";\ntype PhantomEvent = \"disconnect\" | \"connect\";\ntype PhantomRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAllTransactions\"\n  | \"signAndSendTransaction\"\n  | \"signMessage\";\n\ninterface ConnectOpts {\n  onlyIfTrusted: boolean;\n}\n\ninterface PhantomProvider {\n  publicKey: PublicKey | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  signAndSendTransaction: (\n    transaction: Transaction,\n    options?: SendOptions\n  ) => Promise<{ signature: string }>;\n  signMessage: (\n    message: Uint8Array | string,\n    display?: DisplayEncoding\n  ) => Promise<{ signature: string; publicKey: PublicKey }>;\n  connect: (opts?: Partial<ConnectOpts>) => Promise<{ publicKey: PublicKey }>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): PhantomProvider | undefined => {\n  if (\"solana\" in window) {\n    const anyWindow: any = window;\n    const provider = anyWindow.solana;\n    if (provider.isPhantom) {\n      return provider;\n    }\n  }\n};\n\nconst NETWORK = clusterApiUrl(\"devnet\");\nconst CONNECTION = new Connection(NETWORK);\nconst EXTERNAL_ADDRESS = new PublicKey(\n  \"2N8qxv4QAGiYe8m3Z2PmCo2SwQtYqKCmUEQj7WsCXuxp\"\n);\n\nconst provider = getProvider();\n\n\nconst createTransaction = async (instructions: TransactionInstruction[]) => {\n  if (!provider.publicKey) {\n    return;\n  }\n  let transaction = new Transaction().add(...instructions);\n  transaction.feePayer = provider.publicKey;\n  console.log(\"Getting recent blockhash\");\n  const anyTransaction: any = transaction;\n  anyTransaction.recentBlockhash = (\n    await CONNECTION.getRecentBlockhash()\n  ).blockhash;\n  return transaction;\n};\nconst createTransferTransaction = async (price) =>\n  createTransaction([\n    SystemProgram.transfer({\n      fromPubkey: provider.publicKey,\n      toPubkey: EXTERNAL_ADDRESS,\n      lamports: (price * 1000000000),\n    }),\n  ]);\nconst sendTransaction = async (transaction: Transaction, item, updateData, setTransactionPercent, setTransactionError, method) => {\n  if (transaction) {\n    try {\n        setTransactionPercent(50);\n        let { signature } = await provider.signAndSendTransaction(transaction);\n        console.log(\n          \"Submitted transaction \" + signature + \", awaiting confirmation\"\n        );\n        setTransactionPercent(75);\n        await CONNECTION.confirmTransaction(signature);\n        if(method === \"add\") {\n          item.wallet = provider.publicKey?.toBase58();\n        } else if(method === \"update\") {\n          item.state = 'started';\n          item.user2.wallet = provider.publicKey?.toBase58();\n        }\n        updateData(item);\n        console.log(\"Transaction \" + signature + \" confirmed\");\n        setTransactionPercent(100);\n    } catch (err) {\n      console.warn(err);\n      console.log(\"Error: \" + JSON.stringify(err));\n      setTransactionError(true);\n    }\n  } else {\n    setTransactionError(true);\n  }\n};\nconst sendTransferInstruction = async (item, updateData, setTransactionPercent, setTransactionError, method) => {\n    const transaction = await createTransferTransaction(item.price);\n    setTransactionPercent(25);\n    sendTransaction(transaction, item, updateData, setTransactionPercent, setTransactionError, method);\n};\n\n\nexport default sendTransferInstruction\n","import React, {useRef, useState } from 'react';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport { Button, Skeleton, Col, Row, Popover, List, Avatar, Divider, Modal, Alert } from 'antd';\nimport {\n  StockOutlined,\n  UserOutlined,\n  RobotOutlined,\n  ReloadOutlined,\n  LoadingOutlined\n} from '@ant-design/icons';\nimport SolanaLogo from './solanaLogo.png'\nimport SolanaLogoInvert from './solanaLogoInvert.png'\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Coinflip from './Coinflip.js'\nimport CreateCoinflip from './CreateCoinflip.js'\nimport sendTransferInstruction from './Phantom/SendTransaction.tsx'\n\nfunction CoinflipMenu() {\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState([]);\n    const [createVisibile, setCreateVisibile] = useState(false);\n    const [needsUpdate, setNeedsUpdate] = useState(false);\n    const [transactionPercent, setTransactionPercent] = useState(0);\n    const [transactionError, setTransactionError] = useState(false);\n\n    const loadNewData = () => {\n        if (loading) {\n          return;\n        }\n        setLoading(true);\n        fetch('https://SolanaCasinoServer.gomez0015.repl.co/getCoinflips')\n        .then(res => res.json())\n        .then(body => {\n          if(body != data) {\n            body.sort((a, b) => (parseInt(a.price) < parseInt(b.price)) ? 1 : -1)\n            for (let i = 0; i < body.length; i++) {\n              if(data.length != 0) {\n                if(data[i].visible == true) {\n                  body[i].visible = true;\n                } else {\n                  body[i].visible = false;\n                }\n              } else {\n                body[i].visible = false;\n              }\n            }\n            setData([...body]);\n            setTimeout(() => {setLoading(false);}, 1000);\n          } else {\n            setTimeout(() => {setLoading(false);}, 1000);\n          }\n        })\n        .catch(() => {\n            setTimeout(() => {setLoading(false);}, 1000);\n        });\n    };\n\n    React.useEffect(() => {\n      loadNewData();\n    }, [])\n\n    React.useEffect(() => {\n      if(needsUpdate) {\n        var handle=setInterval(needsUpdate ? loadNewData : null ,5000);   //5 seconds\n\n        return ()=>{\n          clearInterval(handle);\n        }\n      }\n    });\n\n    const updateData = (item) => { \n      axios.post('https://SolanaCasinoServer.gomez0015.repl.co/getCoinflipResults', {coinflipData: item})\n      .then(function (response) {\n        loadNewData();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    }\n\n\n    const endCoinflip = (item) => { \n      axios.post('https://SolanaCasinoServer.gomez0015.repl.co/endCoinflip', {coinflipData: item})\n      .then(function (response) {\n        loadNewData();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    }\n\n    const createCoinflip = (item) => {\n      axios.post('https://SolanaCasinoServer.gomez0015.repl.co/addCoinflip', {name: item.name, price: item.price, coin: item.coin, wallet: item.wallet})\n      .then(function (response) {\n        loadNewData();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n    }\n\n    const childCompRef = useRef();\n\n    return (\n    <div style={{\n      textAlign: 'center',\n      }} >\n    <div style={{textAlign: 'right',}}>\n      {loading ? \n      <LoadingOutlined style={{fontSize: '26px', cursor: 'pointer', position: 'absolute', top: '110px', right: '50px'}}/> \n      : \n      <ReloadOutlined style={{fontSize: '26px', cursor: 'pointer', position: 'absolute', top: '110px', right: '50px'}} onClick={() => {loadNewData();}}/>}\n    </div>\n    <Button\n    style={{\n      marginBottom: '25px', marginTop: '-25px',\n    }}\n    onClick={() => {setCreateVisibile(true); setTransactionPercent(0); setTransactionError(false);}}\n    >Create Coinflip</Button>\n    <CreateCoinflip transactionPercentage={transactionPercent} transactionError={transactionError} visible={createVisibile} onCancel={() => {setCreateVisibile(false)}} onCreateFlip={(item) => {sendTransferInstruction(item, createCoinflip, setTransactionPercent, setTransactionError, 'add')}}/>\n    <div\n      id=\"scrollableDiv\"\n      style={{\n        height: 750,\n        textAlign: 'left',\n        overflow: 'auto',\n        padding: '0 16px',\n        border: '1px solid rgba(140, 140, 140, 0.35)',\n      }}\n    >\n      <InfiniteScroll\n        dataLength={data.length}\n        next={loadNewData}\n        loader={<Skeleton avatar paragraph={{ rows: 1 }} active />}\n        endMessage={<Divider plain>Thats all, folks!</Divider>}\n        scrollableTarget=\"scrollableDiv\"\n      >\n        <List\n          dataSource={data}\n          renderItem={item => (\n            <List.Item key={item.id}>\n              <List.Item.Meta\n                avatar={<Avatar src={item.user1.coin == '1' ? SolanaLogo : SolanaLogoInvert} />}\n                title={<a href=\"#\">{item.user1.name + ' - ' + item.price + 'sol'}</a>}\n                description={item.user1.wallet}\n              />\n              <div>\n              {item.result == 'none' ||  item.state != 'finished' ? null :  item.result == 'heads' ? <img src={SolanaLogo} style={{width: '25px', marginRight: '5px'}} /> : <img src={SolanaLogoInvert} style={{width: '25px', marginRight: '5px'}} />}\n              <Button \n              onClick={() => {\n                setTransactionPercent(0); setTransactionError(false);\n                item.visible = true;\n                setData([...data])\n                setNeedsUpdate(true);\n              }\n              }\n              >{item.state != 'open' ? 'Watch' : 'Join'}</Button>\n              <Coinflip transactionPercentage={transactionPercent} transactionError={transactionError} coinflipFinish={() => { setTimeout(() => {setNeedsUpdate(true); endCoinflip(item);}, 2000);}} coin={item.user1.coin} state={item.state} visible={item.visible} price={item.price} wallet1={item.user1.wallet} wallet2={item.user2.wallet} onCancel={() => {item.visible = false; setNeedsUpdate(false); setData([...data]);}} onJoin={() => {setNeedsUpdate(false); sendTransferInstruction(item, updateData, setTransactionPercent, setTransactionError, 'update')}} result={item.result}/>\n              </div>\n            </List.Item>\n          )}\n        />\n      </InfiniteScroll>\n    </div>\n    </div>\n    );\n}\n\nexport default CoinflipMenu;","import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\nimport { Button, Popover, Input, Form, Card, Row, Col, Carousel, Rate, Statistic } from 'antd';\nimport {\n  StockOutlined,\n  UserOutlined,\n  RobotOutlined\n} from '@ant-design/icons';\nimport { Line } from '@ant-design/charts';\nimport Logo from './solanaLogo.png'\n\nconst { Meta } = Card;\n\nfunction Account() {\n\n  const contentStyle = {\n    height: '500px',\n    marginTop: '20px',\n    color: '#fff',\n    lineHeight: '160px',\n    background: '#001529',\n    padding: '50px',\n    width: '100%',\n  };\n\n  return ( \n    <div style={{textAlign: 'center'}}>\n        <Row gutter={[16, 16]}>\n          <Col span={24}>  \n            <Card title={<div><img style={{width: '150px'}} src={Logo} alt=\"Logo\" /><h2 style={{marginBottom: '0px'}}>Solana Casino</h2><h5>('The Best Solana Casino')</h5></div>}> \n            </Card>\n          </Col>\n        </Row>\n        <Row gutter={[16, 16]} style={{marginTop: \"25px\"}}>\n          <Col span={24}>  <Card> <Statistic title=\"Active Users\" value={112893} /> <Statistic title=\"Total Gambled\" value={'10,230 SOL'} /> <Rate disabled defaultValue={4} /></Card> </Col>\n        </Row>\n    </div>\n  );\n}\n\nexport default Account;","import { useEffect, useState } from \"react\";\nimport { Button } from 'antd';\nimport Icon from '@ant-design/icons';\n\ntype Event = \"connect\" | \"disconnect\";\n\ninterface Phantom {\n  on: (event: Event, callback: () => void) => void;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n}\n\nconst PhantomSVG = () => (\n  <svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"15px\" height=\"15px\" viewBox=\"0 0 768.000000 768.000000\"\n  preserveAspectRatio=\"xMidYMid meet\">\n\n  <g transform=\"translate(0.000000,768.000000) scale(0.100000,-0.100000)\"\n  fill=\"#000000\" stroke=\"none\">\n  <path d=\"M3582 7670 c-1248 -92 -2341 -749 -3003 -1807 -96 -153 -228 -412\n  -297 -583 -460 -1141 -348 -2429 301 -3471 243 -391 584 -762 959 -1043 247\n  -185 607 -387 883 -495 1140 -447 2412 -332 3446 312 391 243 762 584 1043\n  959 238 317 448 720 573 1098 79 240 145 554 175 830 18 174 15 605 -6 780\n  -54 453 -153 811 -331 1200 -259 566 -686 1090 -1193 1468 -550 409 -1193 662\n  -1877 737 -169 19 -518 27 -673 15z m108 -1385 c501 -59 940 -241 1325 -552\n  129 -104 330 -311 426 -438 305 -407 479 -882 506 -1387 l6 -118 347 0 c193 0\n  371 -5 401 -10 116 -22 212 -96 264 -205 41 -84 40 -180 -5 -324 -99 -327\n  -285 -616 -589 -922 -195 -195 -324 -300 -556 -454 -204 -135 -303 -191 -506\n  -289 -435 -210 -882 -339 -1308 -377 -172 -15 -618 -6 -756 15 -478 72 -911\n  257 -1315 559 -157 118 -409 363 -520 507 -233 302 -391 615 -475 945 -80 312\n  -93 627 -39 955 182 1103 1083 1958 2208 2094 151 19 434 19 586 1z\"/>\n  <path d=\"M1987 4599 c-104 -17 -200 -88 -248 -184 -24 -50 -24 -51 -27 -408\n  l-3 -358 27 -60 c34 -76 113 -150 189 -178 165 -62 350 14 426 174 l29 60 0\n  346 c0 278 -3 355 -15 388 -54 154 -213 247 -378 220z\"/>\n  <path d=\"M3172 4599 c-104 -17 -198 -87 -248 -186 l-29 -58 0 -355 0 -355 33\n  -67 c36 -73 86 -123 161 -160 66 -33 215 -33 282 0 74 36 125 87 161 160 l33\n  67 0 355 0 355 -28 56 c-66 136 -214 212 -365 188z\"/>\n  </g>\n  </svg>\n);\n\nconst ConnectToPhantom = () => {\n  const [phantom, setPhantom] = useState<Phantom | null>(null);\n\n  useEffect(() => {\n    if (\"solana\" in window) {\n      setPhantom(window[\"solana\"]);\n    }\n  }, []);\n\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    phantom?.on(\"connect\", () => {\n      setConnected(true);\n    });\n\n    phantom?.on(\"disconnect\", () => {\n      setConnected(false);\n    });\n  }, [phantom]);\n\n  const connectHandler = () => {\n    phantom?.connect();\n  };\n\n  const disconnectHandler = () => {\n    phantom?.disconnect();\n  };\n\n  if (phantom) {\n    if (connected) {\n      return (\n        <Button\n          icon={<Icon component={PhantomSVG} />}\n          onClick={disconnectHandler}\n          danger={true}\n        >\n          Disconnect from Phantom\n        </Button>\n      );\n    }\n\n    return (\n      <Button\n        icon={<Icon component={PhantomSVG} />}\n        onClick={connectHandler}\n      >\n        Connect to Phantom\n      </Button>\n    );\n  }\n\n  return (\n    <a\n      href=\"https://phantom.app/\"\n      target=\"_blank\"\n    >\n      Get Phantom\n    </a>\n  );\n};\n\nexport default ConnectToPhantom;\n","import './App.css';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport CoinflipMenu from './components/CoinflipMenu'\nimport Home from './components/Home'\nimport Logo from './components/solanaLogo.png'\nimport ConnectToPhantom from \"./components/Phantom/ConnectToPhantom.tsx\";\nimport { Layout, Menu, Breadcrumb, Button } from 'antd';\nimport {\n  StockOutlined,\n  UserOutlined,\n  HomeOutlined,\n  ClockCircleOutlined,\n  DollarOutlined\n} from '@ant-design/icons';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nfunction App() {\n  const [collapsed, setCollapsed] = useState(false);\n  const [currentPage, setCurrentPage] = useState(\"Home\");\n\n  React.useEffect(() => {\n    const parsedData = localStorage.getItem(\"currentPage\") || \"Home\"\n    setCurrentPage(parsedData);\n  }, [])\n\n  async function changeCurrentPage(page) {\n    localStorage.setItem(\"currentPage\", page);\n    setCurrentPage(page)\n  }\n\n  return (\n    <Layout>\n      <Header className=\"header\" >\n        <img style={{width: '50px', display: 'inline', position: 'relative', bottom: '0px', display: 'inline'}} src={Logo} alt=\"Logo\" />\n        <Menu style={{display: 'inline', float: 'right'}}theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n          <ConnectToPhantom />\n        </Menu>\n      </Header>\n      <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed} onCollapse={() => { setCollapsed(!collapsed)}}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" defaultSelectedKeys={currentPage == \"CoinflipMenu\" ? ['2'] : ['1']} mode=\"inline\">\n            <Menu.Item key=\"1\" style={{ marginTop: '0px'}} icon={<HomeOutlined />} onClick={() => changeCurrentPage(\"Home\")}>\n              Home\n            </Menu.Item>\n            <Menu.Item key=\"2\" icon={<DollarOutlined />} onClick={() => changeCurrentPage(\"CoinflipMenu\")}>\n              1v1 Coinflip\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n          <Content style={{ margin: '0 16px' }}>\n            <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n              {currentPage == \"CoinflipMenu\" ? <CoinflipMenu /> : <Home />}\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>@RaxoCoding</Footer>\n        </Layout>\n      </Layout>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}